const mongoose = require("mongoose");
const Moment = require("moment");
const dotenv = require("dotenv");
import { customAlphabet } from 'nanoid'
const nanoid = customAlphabet('1234567890', 4)
dotenv.config();
const { sendSMSCode } = require("../helper/twilio");

const { Schema } = mongoose;

const mongoSchema = new Schema({
  user: {
    type: Schema.Types.ObjectId,
    ref: "User",
  },
  code: {
    type: Number,
  },
  passed: {
    type: Boolean,
    default: false,
  },
  used: {
    type: Boolean,
    default: false,
  },
  to: {
    type: String,
  },
  ip: {
    type: String,
  },
},
  {
    timestamps: {
      createdAt: "created_at",
      updatedAt: "updated_at",
    },
  }
);

class SmsClass {
  //checked 2019-06-03
  static async sendSms({ to, ip }) {
    const code = nanoid();

    console.log("sms code generated by nanoid:", code);

    const send_result = await sendSMSCode({ to, code });

    if (send_result.result === "success") {
      const sms = await Sms.create({ to, code, ip });

      if (sms) {
        return { result: "success", data: sms._id };
      }
    } else {
      return { result: "error", error: send_result.error };
    }
  }

  static async checkSms({ _id, code, user }) {
    const sms = await Sms.findOne({ _id, code });
    if (sms) {
      const sms = await Sms.findOneAndUpdate({ _id, code }, { passed: true });
      return true;
    }
    const smsUser = await Sms.findOne({ user, code });
    if (smsUser) {
      const smsUser = await Sms.findOneAndUpdate(
        { user, code },
        { passed: true }
      );
      return true;
    }
    return false;
  }
}

mongoSchema.loadClass(SmsClass);

const Sms = mongoose.model("sms", mongoSchema);

module.exports = Sms;
